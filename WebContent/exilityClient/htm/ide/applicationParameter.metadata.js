
 var ele;
var P2 = new PM.ExilityPage(window, 'applicationParameter');
P2.onLoadActionNames = [ 'getData'];
P2.onModifyModeActionNames = [ 'disableSave','getData'];
P2.pageMode = 'modify';
P2.pageWidth = 1028;
P2.pageHeight = 700;
P2.trackFieldChanges = true;
P2.breadCrumpTitle = 'applicationParameter';
/*Page parameters */
ele = new PM.PageParameter();
ele.name = 'okToSave';
ele.isPrimaryKey = true;
P2.addParameter(ele);


//special variable for tracking active tab of tab panel allParameters
var allParametersActiveTabName = 'projectSetupTab';
var allParametersActivePanelName = 'projectSetupTabsDiv';
ele = new PM.AssistedInputField();
ele.dataType = 'text';
ele.minCharsToTriggerService = 1;
ele.isValid = true;
ele.valueList = '0,No;1,Yes';
ele.codePickerLeft = -1;
ele.codePickerTop = -1;
ele.suggestAfterMinChars = 1;
ele.name = 'uniqueNamesAcrossGroups';
ele.label = 'Data elements unique across groups?';
ele.value = '';
P2.addField(ele);
ele = new PM.AssistedInputField();
ele.dataType = 'text';
ele.minCharsToTriggerService = 1;
ele.isValid = true;
ele.codePickerLeft = -1;
ele.codePickerTop = -1;
ele.suggestAfterMinChars = 1;
ele.name = 'dataElementSeparator';
ele.label = 'Data element separator';
ele.value = '';
P2.addField(ele);
ele = new PM.AssistedInputField();
ele.dataType = 'text';
ele.minCharsToTriggerService = 1;
ele.isValid = true;
ele.codePickerLeft = -1;
ele.codePickerTop = -1;
ele.suggestAfterMinChars = 1;
ele.name = 'globalServerDataNames';
ele.label = 'Global fields';
ele.value = '';
P2.addField(ele);
ele = new PM.AssistedInputField();
ele.dataType = 'text';
ele.minCharsToTriggerService = 1;
ele.isValid = true;
ele.codePickerLeft = -1;
ele.codePickerTop = -1;
ele.suggestAfterMinChars = 1;
ele.name = 'loginServiceId';
ele.label = 'Login service name';
ele.value = '';
P2.addField(ele);
ele = new PM.AssistedInputField();
ele.dataType = 'text';
ele.minCharsToTriggerService = 1;
ele.isValid = true;
ele.codePickerLeft = -1;
ele.codePickerTop = -1;
ele.suggestAfterMinChars = 1;
ele.name = 'logoutServiceId';
ele.label = 'Logout service name';
ele.value = '';
P2.addField(ele);
ele = new PM.AssistedInputField();
ele.dataType = 'text';
ele.minCharsToTriggerService = 1;
ele.isValid = true;
ele.codePickerLeft = -1;
ele.codePickerTop = -1;
ele.suggestAfterMinChars = 1;
ele.name = 'loggedInUserFieldName';
ele.label = 'Fieldname for loggedin user';
ele.value = '';
P2.addField(ele);
ele = new PM.AssistedInputField();
ele.dataType = 'text';
ele.minCharsToTriggerService = 1;
ele.isValid = true;
ele.valueList = '0,Yes;1,No';
ele.codePickerLeft = -1;
ele.codePickerTop = -1;
ele.suggestAfterMinChars = 1;
ele.name = 'loggedInUserDataTypeIsInteger';
ele.label = 'User id is integer';
ele.value = '';
P2.addField(ele);
ele = new PM.AssistedInputField();
ele.dataType = 'text';
ele.minCharsToTriggerService = 1;
ele.isValid = true;
ele.codePickerLeft = -1;
ele.codePickerTop = -1;
ele.suggestAfterMinChars = 1;
ele.name = 'setCookies';
ele.label = 'Cookie names';
ele.value = '';
P2.addField(ele);
ele = new PM.AssistedInputField();
ele.dataType = 'text';
ele.minCharsToTriggerService = 1;
ele.isValid = true;
ele.codePickerLeft = -1;
ele.codePickerTop = -1;
ele.suggestAfterMinChars = 1;
ele.name = 'getCookies';
ele.label = 'Cookies to be extracted';
ele.value = '';
P2.addField(ele);
ele = new PM.HiddenField();
ele.dataType = 'text';
ele.name = 'fileUploadMeans';
ele.label = '';
ele.value = '';
P2.addField(ele);
ele = new PM.AssistedInputField();
ele.dataType = 'text';
ele.minCharsToTriggerService = 1;
ele.isValid = true;
ele.codePickerLeft = -1;
ele.codePickerTop = -1;
ele.suggestAfterMinChars = 1;
ele.name = 'filePath';
ele.label = 'Path for uploading files';
ele.value = '';
P2.addField(ele);
ele = new PM.AssistedInputField();
ele.dataType = 'text';
ele.minCharsToTriggerService = 1;
ele.isValid = true;
ele.codePickerLeft = -1;
ele.codePickerTop = -1;
ele.suggestAfterMinChars = 1;
ele.name = 'excelFilePath';
ele.label = 'Path for excel files';
ele.value = '';
P2.addField(ele);
ele = new PM.AssistedInputField();
ele.dataType = 'text';
ele.minCharsToTriggerService = 1;
ele.isValid = true;
ele.codePickerLeft = -1;
ele.codePickerTop = -1;
ele.suggestAfterMinChars = 1;
ele.name = 'ExcelTemplatesPath';
ele.label = 'Path for excel templates';
ele.value = '';
P2.addField(ele);
ele = new PM.AssistedInputField();
ele.dataType = 'text';
ele.minCharsToTriggerService = 1;
ele.isValid = true;
ele.codePickerLeft = -1;
ele.codePickerTop = -1;
ele.suggestAfterMinChars = 1;
ele.name = 'excelReportFileSavePath';
ele.label = 'Path for excel reports';
ele.value = '';
P2.addField(ele);
ele = new PM.AssistedInputField();
ele.dataType = 'text';
ele.minCharsToTriggerService = 1;
ele.isValid = true;
ele.codePickerLeft = -1;
ele.codePickerTop = -1;
ele.suggestAfterMinChars = 1;
ele.name = 'cleanserName';
ele.label = 'Cleanser name';
ele.value = '';
P2.addField(ele);
ele = new PM.AssistedInputField();
ele.dataType = 'text';
ele.minCharsToTriggerService = 1;
ele.isValid = true;
ele.codePickerLeft = -1;
ele.codePickerTop = -1;
ele.suggestAfterMinChars = 1;
ele.name = 'cleanserNameSpace';
ele.label = 'Cleanser namespace';
ele.value = '';
P2.addField(ele);
ele = new PM.AssistedInputField();
ele.dataType = 'text';
ele.minCharsToTriggerService = 1;
ele.isValid = true;
ele.codePickerLeft = -1;
ele.codePickerTop = -1;
ele.suggestAfterMinChars = 1;
ele.name = 'cleanserAssemblyName';
ele.label = 'Cleanser assembly name';
ele.value = '';
P2.addField(ele);
ele = new PM.AssistedInputField();
ele.dataType = 'text';
ele.minCharsToTriggerService = 1;
ele.isValid = true;
ele.codePickerLeft = -1;
ele.codePickerTop = -1;
ele.suggestAfterMinChars = 1;
ele.name = 'dataSource';
ele.label = 'Datasource for db connection';
ele.value = '';
P2.addField(ele);
ele = new PM.AssistedInputField();
ele.dataType = 'text';
ele.minCharsToTriggerService = 1;
ele.isValid = true;
ele.codePickerLeft = -1;
ele.codePickerTop = -1;
ele.suggestAfterMinChars = 1;
ele.name = 'dbDriver';
ele.label = 'Database driver';
ele.value = '';
P2.addField(ele);
ele = new PM.AssistedInputField();
ele.dataType = 'text';
ele.minCharsToTriggerService = 1;
ele.isValid = true;
ele.codePickerLeft = -1;
ele.codePickerTop = -1;
ele.suggestAfterMinChars = 1;
ele.name = 'connectionString';
ele.label = 'Database connection string';
ele.value = '';
P2.addField(ele);
ele = new PM.HiddenField();
ele.dataType = 'text';
ele.name = 'commonPrimaryKeyColumnName';
ele.label = '';
ele.value = '';
P2.addField(ele);
ele = new PM.AssistedInputField();
ele.dataType = 'text';
ele.minCharsToTriggerService = 1;
ele.isValid = true;
ele.codePickerLeft = -1;
ele.codePickerTop = -1;
ele.suggestAfterMinChars = 1;
ele.name = 'commandTimeOutTime';
ele.label = 'SQL command timeout';
ele.value = '';
P2.addField(ele);
ele = new PM.AssistedInputField();
ele.dataType = 'text';
ele.minCharsToTriggerService = 1;
ele.isValid = true;
ele.codePickerLeft = -1;
ele.codePickerTop = -1;
ele.suggestAfterMinChars = 1;
ele.name = 'batchConnectionString';
ele.label = 'Connection string for batch';
ele.value = '';
P2.addField(ele);
ele = new PM.AssistedInputField();
ele.dataType = 'text';
ele.minCharsToTriggerService = 1;
ele.isValid = true;
ele.valueList = '0,No;1,Yes';
ele.codePickerLeft = -1;
ele.codePickerTop = -1;
ele.suggestAfterMinChars = 1;
ele.name = 'enableAuditForAll';
ele.label = 'Audit all tables?';
ele.value = '';
P2.addField(ele);
ele = new PM.AssistedInputField();
ele.dataType = 'text';
ele.minCharsToTriggerService = 1;
ele.isValid = true;
ele.codePickerLeft = -1;
ele.codePickerTop = -1;
ele.suggestAfterMinChars = 1;
ele.name = 'auditdataSource';
ele.label = 'Datasource for audit';
ele.value = '';
P2.addField(ele);
ele = new PM.AssistedInputField();
ele.dataType = 'text';
ele.minCharsToTriggerService = 1;
ele.isValid = true;
ele.valueList = '0,No;1,Yes';
ele.codePickerLeft = -1;
ele.codePickerTop = -1;
ele.suggestAfterMinChars = 1;
ele.name = 'isSeparateAuditSchema';
ele.label = 'Separate schema for audit?';
ele.value = '';
P2.addField(ele);
ele = new PM.AssistedInputField();
ele.dataType = 'text';
ele.minCharsToTriggerService = 1;
ele.isValid = true;
ele.codePickerLeft = -1;
ele.codePickerTop = -1;
ele.suggestAfterMinChars = 1;
ele.name = 'audittableSuffix';
ele.label = 'Audit table suffix';
ele.value = '';
P2.addField(ele);
ele = new PM.AssistedInputField();
ele.dataType = 'text';
ele.minCharsToTriggerService = 1;
ele.isValid = true;
ele.codePickerLeft = -1;
ele.codePickerTop = -1;
ele.suggestAfterMinChars = 1;
ele.name = 'auditConnectionString';
ele.label = 'Audit connection string';
ele.value = '';
P2.addField(ele);
ele = new PM.AssistedInputField();
ele.dataType = 'text';
ele.defaultValue = 'postgreSql';
ele.minCharsToTriggerService = 1;
ele.isValid = true;
ele.valueList = 'postgre;oracle;sqlServer;mySql';
ele.codePickerLeft = -1;
ele.codePickerTop = -1;
ele.suggestAfterMinChars = 1;
ele.name = 'rdbmsBeingUsed';
ele.label = 'rdbms being used';
ele.value = 'postgreSql';
P2.addField(ele);
ele = new PM.AssistedInputField();
ele.dataType = 'text';
ele.minCharsToTriggerService = 1;
ele.isValid = true;
ele.codePickerLeft = -1;
ele.codePickerTop = -1;
ele.suggestAfterMinChars = 1;
ele.name = 'systemDateFunction';
ele.label = 'System date function';
ele.value = '';
P2.addField(ele);
ele = new PM.AssistedInputField();
ele.dataType = 'text';
ele.minCharsToTriggerService = 1;
ele.isValid = true;
ele.codePickerLeft = -1;
ele.codePickerTop = -1;
ele.suggestAfterMinChars = 1;
ele.name = 'dateFormattingPrefix';
ele.label = 'Date formatting prefix';
ele.value = '';
P2.addField(ele);
ele = new PM.AssistedInputField();
ele.dataType = 'text';
ele.minCharsToTriggerService = 1;
ele.isValid = true;
ele.codePickerLeft = -1;
ele.codePickerTop = -1;
ele.suggestAfterMinChars = 1;
ele.name = 'dateFormattingPostfix';
ele.label = 'Date formatting postfix';
ele.value = '';
P2.addField(ele);
ele = new PM.AssistedInputField();
ele.dataType = 'text';
ele.minCharsToTriggerService = 1;
ele.isValid = true;
ele.codePickerLeft = -1;
ele.codePickerTop = -1;
ele.suggestAfterMinChars = 1;
ele.name = 'dateTimeFormattingPrefix';
ele.label = 'Date and time formatting prefix';
ele.value = '';
P2.addField(ele);
ele = new PM.AssistedInputField();
ele.dataType = 'text';
ele.minCharsToTriggerService = 1;
ele.isValid = true;
ele.codePickerLeft = -1;
ele.codePickerTop = -1;
ele.suggestAfterMinChars = 1;
ele.name = 'dateTimeFormattingPostfix';
ele.label = 'Date and formatting postfix';
ele.value = '';
P2.addField(ele);
ele = new PM.AssistedInputField();
ele.dataType = 'text';
ele.minCharsToTriggerService = 1;
ele.isValid = true;
ele.codePickerLeft = -1;
ele.codePickerTop = -1;
ele.suggestAfterMinChars = 1;
ele.name = 'nlsDateFormat';
ele.label = 'Oracle nls_dateformat';
ele.value = '';
P2.addField(ele);
ele = new PM.AssistedInputField();
ele.dataType = 'text';
ele.minCharsToTriggerService = 1;
ele.isValid = true;
ele.valueList = '0,No;1,Yes';
ele.codePickerLeft = -1;
ele.codePickerTop = -1;
ele.suggestAfterMinChars = 1;
ele.name = 'useQuotesInSql';
ele.label = 'Use quotes in sql';
ele.value = '';
P2.addField(ele);
ele = new PM.AssistedInputField();
ele.dataType = 'text';
ele.minCharsToTriggerService = 1;
ele.isValid = true;
ele.valueList = '0,No;1,Yes';
ele.codePickerLeft = -1;
ele.codePickerTop = -1;
ele.suggestAfterMinChars = 1;
ele.name = 'useNullForEmptyString';
ele.label = 'NULL for empty string?';
ele.value = '';
P2.addField(ele);
ele = new PM.AssistedInputField();
ele.dataType = 'text';
ele.isRequired = true;
ele.minCharsToTriggerService = 1;
ele.isValid = true;
ele.codePickerLeft = -1;
ele.codePickerTop = -1;
ele.suggestAfterMinChars = 1;
ele.name = 'projectName';
ele.label = 'Project name';
ele.value = '';
P2.addField(ele);
ele = new PM.AssistedInputField();
ele.dataType = 'text';
ele.isRequired = true;
ele.minCharsToTriggerService = 1;
ele.isValid = true;
ele.valueList = 'css,css;0,default;1,One;2,Two;3,Three;4,Four;5,PathFinder';
ele.codePickerLeft = -1;
ele.codePickerTop = -1;
ele.suggestAfterMinChars = 1;
ele.name = 'pageLayoutType';
ele.label = 'Page layout type';
ele.value = '';
P2.addField(ele);
ele = new PM.AssistedInputField();
ele.dataType = 'text';
ele.isRequired = true;
ele.minCharsToTriggerService = 1;
ele.isValid = true;
ele.codePickerLeft = -1;
ele.codePickerTop = -1;
ele.suggestAfterMinChars = 1;
ele.name = 'exilityFolderPrefix';
ele.label = 'Exility folder prefix';
ele.value = '';
P2.addField(ele);
ele = new PM.AssistedInputField();
ele.dataType = 'text';
ele.isRequired = true;
ele.minCharsToTriggerService = 1;
ele.isValid = true;
ele.codePickerLeft = -1;
ele.codePickerTop = -1;
ele.suggestAfterMinChars = 1;
ele.name = 'commonFolderPrefix';
ele.label = 'Common folder prefix';
ele.value = '';
P2.addField(ele);
ele = new PM.AssistedInputField();
ele.dataType = 'text';
ele.isRequired = true;
ele.minCharsToTriggerService = 1;
ele.isValid = true;
ele.codePickerLeft = -1;
ele.codePickerTop = -1;
ele.suggestAfterMinChars = 1;
ele.name = 'imageFilePrefix';
ele.label = 'Image file prefix';
ele.value = '';
P2.addField(ele);
ele = new PM.AssistedInputField();
ele.dataType = 'text';
ele.isRequired = true;
ele.minCharsToTriggerService = 1;
ele.isValid = true;
ele.valueList = 'dropDown;nextToEachOther';
ele.codePickerLeft = -1;
ele.codePickerTop = -1;
ele.suggestAfterMinChars = 1;
ele.name = 'paginateButtonType';
ele.label = 'Pagination button type';
ele.value = '';
P2.addField(ele);
ele = new PM.AssistedInputField();
ele.dataType = 'text';
ele.isRequired = true;
ele.minCharsToTriggerService = 1;
ele.isValid = true;
ele.codePickerLeft = -1;
ele.codePickerTop = -1;
ele.suggestAfterMinChars = 1;
ele.name = 'defaultPageHeight';
ele.label = 'Default page height';
ele.value = '';
P2.addField(ele);
ele = new PM.AssistedInputField();
ele.dataType = 'text';
ele.isRequired = true;
ele.minCharsToTriggerService = 1;
ele.isValid = true;
ele.codePickerLeft = -1;
ele.codePickerTop = -1;
ele.suggestAfterMinChars = 1;
ele.name = 'defaultPageWidth';
ele.label = 'Default page width';
ele.value = '';
P2.addField(ele);
ele = new PM.AssistedInputField();
ele.dataType = 'text';
ele.minCharsToTriggerService = 1;
ele.isValid = true;
ele.codePickerLeft = -1;
ele.codePickerTop = -1;
ele.suggestAfterMinChars = 1;
ele.name = 'defaultPaginationSize';
ele.label = 'Number of rows per pagination';
ele.value = '';
P2.addField(ele);
ele = new PM.AssistedInputField();
ele.dataType = 'text';
ele.defaultValue = 'false';
ele.minCharsToTriggerService = 1;
ele.isValid = true;
ele.valueList = '0,No;1,Yes';
ele.codePickerLeft = -1;
ele.codePickerTop = -1;
ele.suggestAfterMinChars = 1;
ele.name = 'assumeTextForMissingDataElement';
ele.label = 'Live with undefined elemens?';
ele.value = 'false';
P2.addField(ele);
ele = new PM.AssistedInputField();
ele.dataType = 'text';
ele.defaultValue = 'false';
ele.minCharsToTriggerService = 1;
ele.isValid = true;
ele.valueList = '0,No;1,Yes';
ele.codePickerLeft = -1;
ele.codePickerTop = -1;
ele.suggestAfterMinChars = 1;
ele.name = 'alignPanels';
ele.label = 'Align panels?';
ele.value = 'false';
P2.addField(ele);
ele = new PM.AssistedInputField();
ele.dataType = 'text';
ele.isRequired = true;
ele.minCharsToTriggerService = 1;
ele.isValid = true;
ele.codePickerLeft = -1;
ele.codePickerTop = -1;
ele.suggestAfterMinChars = 1;
ele.name = 'htmlRootRelativeToResourcePath';
ele.label = 'Relative path of html from root';
ele.value = '';
P2.addField(ele);
ele = new PM.AssistedInputField();
ele.dataType = 'text';
ele.isRequired = true;
ele.minCharsToTriggerService = 1;
ele.isValid = true;
ele.valueList = '0,Default;3,Do not put *;1,* before labl;2,* after label';
ele.codePickerLeft = -1;
ele.codePickerTop = -1;
ele.suggestAfterMinChars = 1;
ele.name = 'starForRequiredField';
ele.label = 'Where do we put * for mandatory field?';
ele.value = '';
P2.addField(ele);
ele = new PM.AssistedInputField();
ele.dataType = 'text';
ele.defaultValue = 'false';
ele.minCharsToTriggerService = 1;
ele.isValid = true;
ele.valueList = '0,No;1,Yes';
ele.codePickerLeft = -1;
ele.codePickerTop = -1;
ele.suggestAfterMinChars = 1;
ele.name = 'httpNoCacheTagRequires';
ele.label = 'Http no-cache for page?';
ele.value = 'false';
P2.addField(ele);
ele = new PM.AssistedInputField();
ele.dataType = 'text';
ele.defaultValue = 'false';
ele.minCharsToTriggerService = 1;
ele.isValid = true;
ele.valueList = '0,No;1,Yes';
ele.codePickerLeft = -1;
ele.codePickerTop = -1;
ele.suggestAfterMinChars = 1;
ele.name = 'lastKeyEventTrigger';
ele.label = 'Auto add-row on tab key?';
ele.value = 'false';
P2.addField(ele);
ele = new PM.AssistedInputField();
ele.dataType = 'text';
ele.defaultValue = 'false';
ele.minCharsToTriggerService = 1;
ele.isValid = true;
ele.valueList = '0,No;1,Yes';
ele.codePickerLeft = -1;
ele.codePickerTop = -1;
ele.suggestAfterMinChars = 1;
ele.name = 'showDeleteOptionAtEnd';
ele.label = 'Common delete at end?';
ele.value = 'false';
P2.addField(ele);
ele = new PM.AssistedInputField();
ele.dataType = 'text';
ele.defaultValue = 'false';
ele.minCharsToTriggerService = 1;
ele.isValid = true;
ele.valueList = '0,No;1,Yes';
ele.codePickerLeft = -1;
ele.codePickerTop = -1;
ele.suggestAfterMinChars = 1;
ele.name = 'showIamgeForDeleteOption';
ele.label = 'Show delete image?';
ele.value = 'false';
P2.addField(ele);
ele = new PM.AssistedInputField();
ele.dataType = 'text';
ele.defaultValue = 'false';
ele.minCharsToTriggerService = 1;
ele.isValid = true;
ele.valueList = '0,No;1,Yes';
ele.codePickerLeft = -1;
ele.codePickerTop = -1;
ele.suggestAfterMinChars = 1;
ele.name = 'showRequiredLabelinGrid';
ele.label = '* for grid column?';
ele.value = 'false';
P2.addField(ele);
ele = new PM.AssistedInputField();
ele.dataType = 'text';
ele.defaultValue = 'false';
ele.minCharsToTriggerService = 1;
ele.isValid = true;
ele.valueList = '0,No;1,Yes';
ele.codePickerLeft = -1;
ele.codePickerTop = -1;
ele.suggestAfterMinChars = 1;
ele.name = 'spanForButtonPanelRequires';
ele.label = 'Span for button panel?';
ele.value = 'false';
P2.addField(ele);
ele = new PM.AssistedInputField();
ele.dataType = 'text';
ele.defaultValue = 'true';
ele.minCharsToTriggerService = 1;
ele.isValid = true;
ele.valueList = '0,No;1,Yes';
ele.codePickerLeft = -1;
ele.codePickerTop = -1;
ele.suggestAfterMinChars = 1;
ele.name = 'generateColTags';
ele.label = 'Generate COL tags for table';
ele.value = 'true';
P2.addField(ele);
ele = new PM.AssistedInputField();
ele.dataType = 'text';
ele.defaultValue = 'false';
ele.minCharsToTriggerService = 1;
ele.isValid = true;
ele.valueList = '0,No;1,Yes';
ele.codePickerLeft = -1;
ele.codePickerTop = -1;
ele.suggestAfterMinChars = 1;
ele.name = 'quietResetAction';
ele.label = 'No need to warn when reset button is clicked';
ele.value = 'false';
P2.addField(ele);
ele = new PM.HiddenField();
ele.dataType = 'text';
ele.defaultValue = 'applicationParameter';
ele.name = 'resourceType';
ele.label = '';
ele.value = 'applicationParameter';
P2.addField(ele);
ele = new PM.HiddenField();
ele.dataType = 'text';
ele.defaultValue = 'applicationParameters';
ele.name = 'resourceName';
ele.label = '';
ele.value = 'applicationParameters';
P2.addField(ele);
ele = new PM.AssistedInputField();
ele.dataType = 'text';
ele.minCharsToTriggerService = 1;
ele.isValid = true;
ele.codePickerLeft = -1;
ele.codePickerTop = -1;
ele.suggestAfterMinChars = 1;
ele.name = 'eMailHost';
ele.label = 'Email host';
ele.value = '';
P2.addField(ele);
ele = new PM.AssistedInputField();
ele.dataType = 'text';
ele.minCharsToTriggerService = 1;
ele.isValid = true;
ele.codePickerLeft = -1;
ele.codePickerTop = -1;
ele.suggestAfterMinChars = 1;
ele.name = 'eMailPort';
ele.label = 'Email port';
ele.value = '';
P2.addField(ele);
ele = new PM.AssistedInputField();
ele.dataType = 'text';
ele.minCharsToTriggerService = 1;
ele.isValid = true;
ele.codePickerLeft = -1;
ele.codePickerTop = -1;
ele.suggestAfterMinChars = 1;
ele.name = 'eMailFromUserId';
ele.label = 'Email userid';
ele.value = '';
P2.addField(ele);
ele = new PM.AssistedInputField();
ele.dataType = 'text';
ele.minCharsToTriggerService = 1;
ele.isValid = true;
ele.codePickerLeft = -1;
ele.codePickerTop = -1;
ele.suggestAfterMinChars = 1;
ele.name = 'eMailFromPassword';
ele.label = 'Email password';
ele.value = '';
P2.addField(ele);
ele = new PM.AssistedInputField();
ele.dataType = 'text';
ele.minCharsToTriggerService = 1;
ele.isValid = true;
ele.codePickerLeft = -1;
ele.codePickerTop = -1;
ele.suggestAfterMinChars = 1;
ele.name = 'eMailBody';
ele.label = 'Email pody';
ele.value = '';
P2.addField(ele);
ele = new PM.AssistedInputField();
ele.dataType = 'text';
ele.minCharsToTriggerService = 1;
ele.isValid = true;
ele.valueList = '0,No;1,Yes';
ele.codePickerLeft = -1;
ele.codePickerTop = -1;
ele.suggestAfterMinChars = 1;
ele.name = 'definitionsToBeCached';
ele.label = 'Cache xmls?';
ele.value = '';
P2.addField(ele);
ele = new PM.HiddenField();
ele.dataType = 'text';
ele.name = 'trace';
ele.label = '';
ele.value = '';
P2.addField(ele);
ele = new PM.AssistedInputField();
ele.dataType = 'text';
ele.minCharsToTriggerService = 1;
ele.isValid = true;
ele.valueList = '0,No;1,Yes';
ele.codePickerLeft = -1;
ele.codePickerTop = -1;
ele.suggestAfterMinChars = 1;
ele.name = 'licenceValidation';
ele.label = 'Licensed Instance?';
ele.value = '';
P2.addField(ele);
ele = new PM.AssistedInputField();
ele.dataType = 'text';
ele.minCharsToTriggerService = 1;
ele.isValid = true;
ele.valueList = '0,No;1,Yes';
ele.codePickerLeft = -1;
ele.codePickerTop = -1;
ele.suggestAfterMinChars = 1;
ele.name = 'securityEnabled';
ele.label = 'Enable security?';
ele.value = '';
P2.addField(ele);
ele = new PM.AssistedInputField();
ele.dataType = 'text';
ele.minCharsToTriggerService = 1;
ele.isValid = true;
ele.valueList = '0,No;1,Yes';
ele.codePickerLeft = -1;
ele.codePickerTop = -1;
ele.suggestAfterMinChars = 1;
ele.name = 'cachePrimaryKeys';
ele.label = 'Cache primary keys?';
ele.value = '';
P2.addField(ele);
/***** action field = disableSave  ********/
ele = new PM.DummyAction();
ele.name = 'disableSave';
ele.showPanels = [ 'save'];
ele.hidePanels = [ 'canNotSave'];
P2.addAction(ele);
/***** action field = getData  ********/
ele = new PM.ServerAction();
ele.name = 'getData';
ele.serviceId = 'ide.getAp';
ele.toRefreshPage = 'beforeMyAction';
ele.queryFieldNames = [ 'resourceType','resourceName'];
ele.closeWindow = true;
ele.queryFieldSources = [ 'resourceType','resourceName'];
P2.addAction(ele);
/***** action field = save  ********/
ele = new PM.ServerAction();
ele.name = 'save';
ele.serviceId = 'ide.saveAp';
ele.callBackActionName = 'claimVictory';
ele.submitForm = true;
ele.toRefreshPage = 'none';
ele.disableForm = true;
ele.resetFormModifiedState = true;
ele.closeWindow = true;
P2.addAction(ele);
/***** action field = claimVictory  ********/
ele = new PM.LocalAction();
ele.name = 'claimVictory';
ele.functionName = 'PM.message(\'Parameters Saved\', \'Info\', \'OK\');';
P2.addAction(ele);
/***** action field = resetDefaultFields  ********/
ele = new PM.LocalAction();
ele.name = 'resetDefaultFields';
ele.functionName = 'resetDefaultFields';
P2.addAction(ele);
/***** action field = close  ********/
ele = new PM.CloseAction();
ele.name = 'close';
ele.warnIfFormIsModified = true;
P2.addAction(ele);
/***** action field = reload  ********/
ele = new PM.ResetAction();
ele.name = 'reload';
ele.warnIfFormIsModified = true;
P2.addAction(ele);
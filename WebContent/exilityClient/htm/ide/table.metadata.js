
 var ele;
var P2 = new PM.ExilityPage(window, 'table');
P2.onLoadActionNames = [ 'getFolders'];
P2.pageWidth = 1028;
P2.pageHeight = 700;
P2.trackFieldChanges = true;
P2.breadCrumpTitle = 'table';
P2.onFormChangeActionName = 'formChanged';
P2.onFormResetActionName = 'formReset';
ele = new PM.AssistedInputField();
ele.dataType = 'text';
ele.doNotValidate = true;
ele.listServiceId = 'folders';
ele.onChangeActionName = 'getTables';
ele.noAutoLoad = true;
ele.selectFirstOption = true;
ele.minCharsToTriggerService = 1;
ele.isValid = true;
ele.codePickerLeft = -1;
ele.codePickerTop = -1;
ele.donotTrackChanges = true;
ele.suggestAfterMinChars = 1;
ele.name = 'folderName';
ele.label = 'Folder Name';
ele.value = '';
P2.addField(ele);
ele = new PM.AssistedInputField();
ele.dataType = 'text';
ele.isRequired = true;
ele.listServiceId = 'files';
ele.onChangeActionName = 'getTable';
ele.noAutoLoad = true;
ele.selectFirstOption = true;
ele.minCharsToTriggerService = 1;
ele.isValid = true;
ele.codePickerLeft = -1;
ele.codePickerTop = -1;
ele.donotTrackChanges = true;
ele.suggestAfterMinChars = 1;
ele.name = 'fileName';
ele.label = 'Table Name';
ele.value = '';
P2.addField(ele);
ele = new PM.HiddenField();
ele.dataType = 'text';
ele.defaultValue = 'table';
ele.name = 'resourceType';
ele.label = '';
ele.value = 'table';
P2.addField(ele);

//special variable for tracking active tab of tab panel editingArea
var editingAreaActiveTabName = 'tableAttributesTab';
var editingAreaActivePanelName = 'tableAttributesTabsDiv';
ele = new PM.AssistedInputField();
ele.dataType = 'text';
ele.isRequired = true;
ele.minCharsToTriggerService = 1;
ele.isValid = true;
ele.codePickerLeft = -1;
ele.codePickerTop = -1;
ele.suggestAfterMinChars = 1;
ele.name = 'name';
ele.label = 'Name';
ele.value = '';
P2.addField(ele);
ele = new PM.AssistedInputField();
ele.dataType = 'text';
ele.minCharsToTriggerService = 1;
ele.isValid = true;
ele.codePickerLeft = -1;
ele.codePickerTop = -1;
ele.suggestAfterMinChars = 1;
ele.name = 'tableName';
ele.label = 'Table Name';
ele.value = '';
P2.addField(ele);
ele = new PM.AssistedInputField();
ele.dataType = 'text';
ele.minCharsToTriggerService = 1;
ele.isValid = true;
ele.codePickerLeft = -1;
ele.codePickerTop = -1;
ele.suggestAfterMinChars = 1;
ele.name = 'module';
ele.label = 'Module';
ele.value = '';
P2.addField(ele);
ele = new PM.AssistedInputField();
ele.dataType = 'text';
ele.minCharsToTriggerService = 1;
ele.isValid = true;
ele.codePickerLeft = -1;
ele.codePickerTop = -1;
ele.suggestAfterMinChars = 1;
ele.name = 'description';
ele.label = 'Description';
ele.value = '';
P2.addField(ele);
ele = new PM.AssistedInputField();
ele.dataType = 'text';
ele.defaultValue = '0';
ele.minCharsToTriggerService = 1;
ele.isValid = true;
ele.valueList = '0,No;1,Yes';
ele.codePickerLeft = -1;
ele.codePickerTop = -1;
ele.suggestAfterMinChars = 1;
ele.name = 'okToDelete';
ele.label = 'Can rows be deleted?';
ele.value = '0';
P2.addField(ele);
ele = new PM.AssistedInputField();
ele.dataType = 'text';
ele.defaultValue = '0';
ele.minCharsToTriggerService = 1;
ele.isValid = true;
ele.valueList = '0,No;1,Yes';
ele.codePickerLeft = -1;
ele.codePickerTop = -1;
ele.suggestAfterMinChars = 1;
ele.name = 'keyToBegenerated';
ele.label = 'keyToBegenerated';
ele.value = '0';
P2.addField(ele);
ele = new PM.TextInputField();
ele.dataType = 'text';
ele.minCharsToTriggerService = 1;
ele.isValid = true;
ele.codePickerLeft = -1;
ele.codePickerTop = -1;
ele.name = 'createdTimestampName';
ele.label = 'CreatedAt field name';
ele.value = '';
P2.addField(ele);
ele = new PM.TextInputField();
ele.dataType = 'text';
ele.minCharsToTriggerService = 1;
ele.isValid = true;
ele.codePickerLeft = -1;
ele.codePickerTop = -1;
ele.name = 'modifiedTimestampName';
ele.label = 'ModifedAt field name';
ele.value = '';
P2.addField(ele);
ele = new PM.TextInputField();
ele.dataType = 'text';
ele.minCharsToTriggerService = 1;
ele.isValid = true;
ele.codePickerLeft = -1;
ele.codePickerTop = -1;
ele.name = 'createdUserName';
ele.label = 'CreatedBy field name';
ele.value = '';
P2.addField(ele);
ele = new PM.TextInputField();
ele.dataType = 'text';
ele.minCharsToTriggerService = 1;
ele.isValid = true;
ele.codePickerLeft = -1;
ele.codePickerTop = -1;
ele.name = 'modifiedUserName';
ele.label = 'CreatedBy field name';
ele.value = '';
P2.addField(ele);

/* MetaData for Panel :cols with table name = columns*/
ele = new PM.GridPanel();
ele.name = 'columns';
ele.panelName = 'cols';
ele.showHeader = true;
ele.simulateClickOnFirstRow = true;
ele.simulateClickOnRow = 'none';
ele.tableName = 'columns';
ele.uniqueColumns = 'name';
ele.dataForNewRowToBeClonedFromRow = 'none';
ele.slideEffect = 'none';
ele.rowHelpText = 'click to edit this parameter';
//linkedTableName  DOES NOT EXIST

P2.addTable(ele);
ele = new PM.OutputField();
ele.dataType = 'text';
ele.defaultValue = 'new column';
ele.maxCharacters = 22;
ele.name = 'columns_name';
ele.tableName = 'columns';
ele.unqualifiedName = 'name';
ele.label = 'Column';
ele.value = 'new column';
P2.addField(ele);
ele = new PM.HiddenField();
ele.dataType = 'text';
ele.name = 'columns_columnName';
ele.tableName = 'columns';
ele.unqualifiedName = 'columnName';
ele.label = '';
ele.value = '';
P2.addField(ele);
ele = new PM.HiddenField();
ele.dataType = 'text';
ele.name = 'columns_label';
ele.tableName = 'columns';
ele.unqualifiedName = 'label';
ele.label = '';
ele.value = '';
P2.addField(ele);
ele = new PM.HiddenField();
ele.dataType = 'text';
ele.name = 'columns_description';
ele.tableName = 'columns';
ele.unqualifiedName = 'description';
ele.label = '';
ele.value = '';
P2.addField(ele);
ele = new PM.HiddenField();
ele.dataType = 'text';
ele.name = 'columns_dataElementName';
ele.tableName = 'columns';
ele.unqualifiedName = 'dataElementName';
ele.label = '';
ele.value = '';
P2.addField(ele);
ele = new PM.HiddenField();
ele.dataType = 'text';
ele.name = 'columns_defaultValue';
ele.tableName = 'columns';
ele.unqualifiedName = 'defaultValue';
ele.label = '';
ele.value = '';
P2.addField(ele);
ele = new PM.HiddenField();
ele.dataType = 'text';
ele.name = 'columns_isOptional';
ele.tableName = 'columns';
ele.unqualifiedName = 'isOptional';
ele.label = '';
ele.value = '';
P2.addField(ele);
ele = new PM.HiddenField();
ele.dataType = 'text';
ele.name = 'columns_dependantOnColumnName';
ele.tableName = 'columns';
ele.unqualifiedName = 'dependantOnColumnName';
ele.label = '';
ele.value = '';
P2.addField(ele);
ele = new PM.HiddenField();
ele.dataType = 'text';
ele.name = 'columns_isKeyColumn';
ele.tableName = 'columns';
ele.unqualifiedName = 'isKeyColumn';
ele.label = '';
ele.value = '';
P2.addField(ele);
ele = new PM.HiddenField();
ele.dataType = 'text';
ele.name = 'columns_listServiceName';
ele.tableName = 'columns';
ele.unqualifiedName = 'listServiceName';
ele.label = '';
ele.value = '';
P2.addField(ele);
ele = new PM.HiddenField();
ele.dataType = 'text';
ele.name = 'columns_enumeration';
ele.tableName = 'columns';
ele.unqualifiedName = 'enumeration';
ele.label = '';
ele.value = '';
P2.addField(ele);
ele = new PM.HiddenField();
ele.dataType = 'text';
ele.name = 'columns_enumerationType';
ele.tableName = 'columns';
ele.unqualifiedName = 'enumerationType';
ele.label = '';
ele.value = '';
P2.addField(ele);

/* MetaData for Panel :colAttributes with table name = column*/
ele = new PM.DisplayPanel();
ele.name = 'column';
ele.panelName = 'colAttributes';
ele.tableName = 'column';
ele.slideEffect = 'none';
//linkedTableName  EXISTS 

ele.linkedTableName = 'columns';
P2.addTable(ele);
ele = new PM.TextInputField();
ele.dataType = 'text';
ele.defaultValue = 'new column';
ele.isRequired = true;
ele.minCharsToTriggerService = 1;
ele.isValid = true;
ele.codePickerLeft = -1;
ele.codePickerTop = -1;
ele.name = 'column_name';
ele.tableName = 'column';
ele.unqualifiedName = 'name';
ele.label = 'Name';
ele.value = 'new column';
P2.addField(ele);
ele = new PM.TextInputField();
ele.dataType = 'text';
ele.minCharsToTriggerService = 1;
ele.isValid = true;
ele.codePickerLeft = -1;
ele.codePickerTop = -1;
ele.name = 'column_columnName';
ele.tableName = 'column';
ele.unqualifiedName = 'columnName';
ele.label = 'Column Name';
ele.value = '';
P2.addField(ele);
ele = new PM.TextInputField();
ele.dataType = 'text';
ele.minCharsToTriggerService = 1;
ele.isValid = true;
ele.codePickerLeft = -1;
ele.codePickerTop = -1;
ele.name = 'column_label';
ele.tableName = 'column';
ele.unqualifiedName = 'label';
ele.label = 'Label';
ele.value = '';
P2.addField(ele);
ele = new PM.TextInputField();
ele.dataType = 'text';
ele.minCharsToTriggerService = 1;
ele.isValid = true;
ele.codePickerLeft = -1;
ele.codePickerTop = -1;
ele.name = 'column_description';
ele.tableName = 'column';
ele.unqualifiedName = 'description';
ele.label = 'Description';
ele.value = '';
P2.addField(ele);
ele = new PM.TextInputField();
ele.dataType = 'text';
ele.minCharsToTriggerService = 1;
ele.isValid = true;
ele.codePickerLeft = -1;
ele.codePickerTop = -1;
ele.name = 'column_dataElementName';
ele.tableName = 'column';
ele.unqualifiedName = 'dataElementName';
ele.label = 'Data Element Name';
ele.value = '';
P2.addField(ele);
ele = new PM.TextInputField();
ele.dataType = 'text';
ele.minCharsToTriggerService = 1;
ele.isValid = true;
ele.codePickerLeft = -1;
ele.codePickerTop = -1;
ele.name = 'column_defaultValue';
ele.tableName = 'column';
ele.unqualifiedName = 'defaultValue';
ele.label = 'Default Value';
ele.value = '';
P2.addField(ele);
ele = new PM.RadioButtonField();
ele.dataType = 'text';
ele.defaultValue = '0';
ele.name = 'column_isOptional';
ele.tableName = 'column';
ele.unqualifiedName = 'isOptional';
ele.label = 'Can value be omitted?';
ele.value = '0';
P2.addField(ele);
ele = new PM.TextInputField();
ele.dataType = 'text';
ele.minCharsToTriggerService = 1;
ele.isValid = true;
ele.codePickerLeft = -1;
ele.codePickerTop = -1;
ele.name = 'column_dependantOnColumnName';
ele.tableName = 'column';
ele.unqualifiedName = 'dependantOnColumnName';
ele.label = 'Depends on Column';
ele.value = '';
P2.addField(ele);
ele = new PM.RadioButtonField();
ele.dataType = 'text';
ele.defaultValue = '0';
ele.name = 'column_isKeyColumn';
ele.tableName = 'column';
ele.unqualifiedName = 'isKeyColumn';
ele.label = 'Is this a Key Column?';
ele.value = '0';
P2.addField(ele);
ele = new PM.TextInputField();
ele.dataType = 'text';
ele.minCharsToTriggerService = 1;
ele.isValid = true;
ele.codePickerLeft = -1;
ele.codePickerTop = -1;
ele.name = 'column_listServiceName';
ele.tableName = 'column';
ele.unqualifiedName = 'listServiceName';
ele.label = 'List Service Name';
ele.value = '';
P2.addField(ele);
ele = new PM.TextInputField();
ele.dataType = 'text';
ele.minCharsToTriggerService = 1;
ele.isValid = true;
ele.codePickerLeft = -1;
ele.codePickerTop = -1;
ele.name = 'column_enumeration';
ele.tableName = 'column';
ele.unqualifiedName = 'enumeration';
ele.label = 'Value List';
ele.value = '';
P2.addField(ele);
ele = new PM.TextInputField();
ele.dataType = 'text';
ele.minCharsToTriggerService = 1;
ele.isValid = true;
ele.codePickerLeft = -1;
ele.codePickerTop = -1;
ele.name = 'column_enumerationType';
ele.tableName = 'column';
ele.unqualifiedName = 'enumerationType';
ele.label = 'Type of enumeraiton';
ele.value = '';
P2.addField(ele);
/***** action field = getFolders  ********/
ele = new PM.ServerAction();
ele.name = 'getFolders';
ele.serviceId = 'ide.getFolders';
ele.toRefreshPage = 'beforeMyAction';
ele.disableForm = true;
ele.queryFieldNames = [ 'resourceType'];
ele.closeWindow = true;
ele.queryFieldSources = [ 'resourceType'];
P2.addAction(ele);
/***** action field = getTables  ********/
ele = new PM.ServerAction();
ele.name = 'getTables';
ele.serviceId = 'ide.getFiles';
ele.toRefreshPage = 'beforeMyAction';
ele.disableForm = true;
ele.queryFieldNames = [ 'resourceType','folderName'];
ele.closeWindow = true;
ele.queryFieldSources = [ 'resourceType','folderName'];
P2.addAction(ele);
/***** action field = getTable  ********/
ele = new PM.ServerAction();
ele.name = 'getTable';
ele.serviceId = 'ide.getTable';
ele.toRefreshPage = 'beforeMyAction';
ele.disableForm = true;
ele.queryFieldNames = [ 'folderName','name'];
ele.fieldToFocusAfterExecution = 'description';
ele.closeWindow = true;
ele.queryFieldSources = [ 'folderName','fileName'];
ele.disableFields = [ 'name'];
ele.enableFields = [ 'new','delete'];
P2.addAction(ele);
/***** action field = save  ********/
ele = new PM.ServerAction();
ele.name = 'save';
ele.serviceId = 'ide.saveTable';
ele.callBackActionName = 'reselectTable';
ele.submitForm = true;
ele.toRefreshPage = 'beforeMyAction';
ele.disableForm = true;
ele.resetFormModifiedState = true;
ele.closeWindow = true;
P2.addAction(ele);
/***** action field = delete  ********/
ele = new PM.ServerAction();
ele.name = 'delete';
ele.serviceId = 'ide.deleteTable';
ele.callBackActionName = 'getTables';
ele.toRefreshPage = 'beforeMyAction';
ele.disableForm = true;
ele.resetFormModifiedState = true;
ele.queryFieldNames = [ 'name'];
ele.closeWindow = true;
ele.queryFieldSources = [ 'name'];
P2.addAction(ele);
/***** action field = reselectTable  ********/
ele = new PM.LocalAction();
ele.name = 'reselectTable';
ele.functionName = 'reselectTable';
P2.addAction(ele);
/***** action field = newTable  ********/
ele = new PM.LocalAction();
ele.name = 'newTable';
ele.functionName = 'newTable';
ele.fieldToFocusAfterExecution = 'name';
ele.showPanels = [ 'tableAttributes'];
ele.disableFields = [ 'new','delete'];
ele.enableFields = [ 'name'];
P2.addAction(ele);
/***** action field = formChanged  ********/
ele = new PM.DummyAction();
ele.name = 'formChanged';
ele.disableFields = [ 'folderName','fileName','new','delete'];
P2.addAction(ele);
/***** action field = formReset  ********/
ele = new PM.DummyAction();
ele.name = 'formReset';
ele.enableFields = [ 'folderName','fileName'];
P2.addAction(ele);
/***** action field = close  ********/
ele = new PM.CloseAction();
ele.name = 'close';
ele.warnIfFormIsModified = true;
P2.addAction(ele);
/***** action field = reload  ********/
ele = new PM.ResetAction();
ele.name = 'reload';
ele.warnIfFormIsModified = true;
P2.addAction(ele);